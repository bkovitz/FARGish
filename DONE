Watchers

  Callable objects that take as arguments:
    host graph
    set of nodes in host graph
  and return a list of responses, each of which has:
    salience  (for a random weighted choice of which response to enact)
    action  (function that acts on the host graph)


Accept numble from keyboard


Main loop:
    Run all of a set of watchers

Mustang Sally / Demo 1:
    FoundWanted: avail consumer -- wanted source
    FoundWanted: Declare victory if Avail matches Target
    Watcher for when an Avail Number equals the Target.
    Watcher to combine Avail Numbers.
    'Consume' removes Avail, produces Block.
    Do arithmetic in Python. Actually solve any numble, though crudely.
    Try combining Avail Numbers randomly.
    When there are no Avails and no solution, tag something with Failed.
    Print the graph symbolically, showing the current "thought".

Print random-number seed.
Take random-number seed as argument.

Print bottom-up "equation".  pg(g), NumboGraph.blocks_str()


Demo 2

   Fix solution string.

   Do only one Response per timestep
      Print list of Responses
      Choose one randomly
      Went back to multiple Responses per timestep so that BoostSalience
      didn't starve all the other Response types.

   choose by salience of Response  DONE
   decay salience

    set Response salience
        favor Consummating a Wanted node
    finer granularity for CouldMakeFromOperands
        First tag Avail with CouldBeOperand.
        Then CouldMakeFromOperandsTagger triggers when it sees
        two numbers tagged CouldBeOperand.
