Demo 2

   Something top-down
   Minus / Needs operands to be ordered
   120 1 2 3 4; 121   Figure out 120 + 1 = 121 right away  SALLY

   Mustang Sally

      1 1 1 1 1; 6  Figure out 2 * 3 = 6
      EquationWatcher

Don't allow multiple consumers. Or detect it and correct it if it
happens.

   Disallow consumer loops, too!

   Try writing out the current model in English-FARGish.  DONE

Don't allow a Block to consume itself.

Seek(2) and Seek(3) alone should prime the model to solve 1 1 1 1 1; 6.

   Add Consumed tag upon consuming.

   Change Consumed to Avail in cascade_fail.

----------


Main loop:
    Randomly choose a response and execute it


CouldMake
    Make the desired Number by completing the equation.


Bottom-up "noticing"
   
   Notice that 120 is "close to" 121.
      CloseNumbersTagger
      tag: CloseNumbers
      CloseToWantedWatcher
         start a process to build the difference

Top-down "searching"

   Make a Wanted-Block node
   When fulfilled, capitalize. E.g. did we solve the numble?
   Detect failure somehow
   Upon failure, add tags so we don't try that again

   Spreading activation to find equation to complete


Salience

   Let Watchers fade away


Design / Refactoring

   Some sort of "filter" to pass nodes through a series of criteria.
   a Nodes class that knows what graph the nodes come from.


Tools

   Single-stepper for FARG model
