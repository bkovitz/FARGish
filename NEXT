numbo5

    SameNumberGlommer  DONE

    Count elements in Glom  DONE

       Tag the Glom only once  DONE
       Why is already_built() not already stopping multiple tags?  DONE

    "Interpreter" for sequence of Actions

        do_timestep(action)  DONE

        "Replay" Glom(all the Bricks)  DONE

        "Replay" seeing that all the Bricks are 1  DONE

    Make a principled way to connect the Glom id with the 'within' argument
    of NoticeAllSameValue and other stored follow-up actions.

        And make that work if the Glom was already built before SeekAndGlom
        was invoked.

        Make an ActionSequence ActiveNode that simply performs each of a
        sequence of ActionNodes when the previous one has run.

NEXT        ActionNode

            Make each ActionNode start with a state of NotDone.

                StateParam?

    See that the number of elements matches the Target

        SameValueTagger  DONE

        Build Gloms and SameValue tags reasonably, so we don't get Gloms
        like { Brick(1), Brick(1), Count(1), Brick(1) }.

    AT these things so far
        Try writing one test, see why it's hard.

    Get a demo-able model running again.
    It should be able to solve any numble (or fail interestingly).

    Rewrite numbo5's ActiveNodes so they search for tuples the same way
    generated code does.



Port-label inheritance

    Hierarchy class  DONE

    UT: Identical PortLabels  DONE

    UT: Is sub-label an instance of super-label?  DONE

    Data structure like PortMates to hold inheritance relations.

    FARGish syntax
      IDEA: Require 'Node' or 'port_label' explicitly at top of inheritance
      hierarchy.  NO

      Better: LCNAME, UCNAME, name  DONE

      Allow multiple : on one inheritance line.  DONE

    Parse  DONE

    Generate code  DONE

    Update UT for FARGish PortLabels
        Finding 'mate' port?
        Finding neighbors of 'operand' port? (Should cover 'minuend' and
        'subtrahend'.)


GlomMerge

    Two nodes  DONE

    Glom + node  DONE

    Glom + glom

    UT

    g.partition_nodes()  DONE

    postamble  DONE

    Proposal(GlomMerge)  DONE

    Proposal should not generate action if Done.

    Proposal should tag itself Done
        Done(Action)? Dont(Action) Might make generic Done tag.


demo3.py:  In gen.py, generate code to tell NotAlreadyBuilt what it needs
to know to generate a BuildSpec for the nodes in the tuple provided by
CartesianProduct.
    
    Manually write code to do that for CouldBeOperand.

        Allow tuple of classes to be passed to g.is_of_class()  DONE

        to_args_kwargs(tup)  DONE

        In to_args_kwargs, change from _Literal to _AtIndex?
        
        In gen.py, map node arguments to tuple elements.

            In Env, track the tuple index of each variable passed to
            make_build3 or Build3.

            Rethink what we pass to Env.add(). We should pass all
            declarative and definitional information: the symbol's type,
            its definition, its index in a _found_tup. In
            demo3.OperandTagger, 'node' should be defined as having
            type 'nodeid' (from nodesearch), cart_expression
            'NodeOfClass((Brick, Block))', and tuple reference
            '_found_tup1 0'.

        See if SeeDo could rewrite itself as IfStmt.

            Write code to coalesce SeeDo conditions into a ConditionExpr2.

            Need a delayed .gen to make in .add_to_class().

            Rewrite SeeDo parsing code in grammar.py.

                Parse Stmt, not ActionExpr.

Demo 12-Mar-2020

    Minus
        ConsumeOperands.rough_estimate()
        Make ConsumeOperands build a Minus

    Merge branches  DONE

    Incorporate new code generation into demo2.py

        Why wasn't OperandsScout always beating SuccessScout and generating
        a Fail action?

        Want  DONE enough for the demo; still need to gen .update_support()

        OperandsScout

        SuccessScout

    Fail w/o trying hopeless ConsumeOperands

    Landmark arithmetic?

    "Want" a subgoal

    Promisingness tied to subgoal

FARGish

    BNF  DONE

    Parse FARGish into "raw" objects  DONE

    Generate Python from "raw" objects

        Write note for what code generation each raw.py class needs to do DONE

        Make Env class  DONE

        Generate auto_link code  DONE

        Build some FARGish-specified nodes  DONE

        Single argument to node: __init__ should copy it to kwargs  DONE

        Build some FARGish-specified nodes and see them auto-link  DONE

        Remove port labels from repr(Node)  DONE

        Build and link agent iff not already built  
            maybe_make_build_action  DONE
            generate code  DONE
            testBuildAgent  DONE

        Make a general NodeSpec class  DONE

        see-do

            SeeDoAccumulator

            Put NodeSpec, NodeWithTag, etc. into FARGish

            Cartesian product for named nodes  DONE

            'build' action  DONE

            'else' with further conditions  DONE

            Comma means 'and'  DONE

            args should be [op, p1, p2], not ['op', 'p1', 'p2']  DONE
            py grammar.py

            NotAlreadyBuilt  DONE but not UT

            see Not(Tagged(Done, this))

        VarArgs needs to insert 'self.' or '_g.neighbor' depending on type
        of variable.  DONE

        Extract from single-element tuple correctly  DONE

        Make FuncCall generate correct Python expr in OperandTagger  DONE

    extern do_something : Action

    Clean up BuildSpec so it's:
        
        1. Easy to link a new node to several existing nodes.

        2. Easy to detect that such a node has already been built.

        LinkSpec: include role names?
            This would let a caller specify nodes by the names of their roles.

    Build3: Set up a BuildSpec  DONE

    .is_match: Need to handle pre-built datum object (instead of class)
    correctly. Do we have to cook up fake FilledAttr objects that are
    just going to return True? Better idea: let FilledAttr.is_match inspect
    the datum object. Wait a minute: why is FilledAttr.is_match() return True
    right now? Because, lacking an argument, AttrParam isn't making a
    FilledAttr.  DONE

    Generate a PortGraph class that has port_mates automatically set up
    correctly.

    Revise testNumbospec.py to do a full run with FARGish.

    Update testNodeSpec.py to remove OLDBuildSpec and LinkSpec.

Clean-up

    rm testNumbospec.py, numbospec.py, numbonodes.py, any others no longer
    relevant.


Detect stuckness.


numbo3b.py: Latest manually "compiled" brute-force Numbo

    Write out the whole model as top-level code  DONE

    Implement whatever gets called  DONE





Clean-up

    UT NumberLine

Planning

    Draw a bunch of graphs depicting everything that I want to happen.

    List all the stages in sequence leading to "guidance by competing analogous
    temporal traces".
    
    Work out Scouts for "fill this in".


Debug: Why isn't reseeding with the same seed producing the same results?

    Now it seems to work. I don't know why.


Simplest possible numble solver

    Debug by showing testNumbospec in the browser

    Simplify (break out) do_timestep()  DONE

      TimeStepper class  DONE

    Number  DONE
      Brick  DONE
      Target  DONE
      Block

    Want

    WantBuiltFromBricks  DONE

    Avail  DONE

    ConsumeOperands  DONE

    backtracking  DONE

        Failed  DONE

    OperandsScout  DONE

    Plus  DONE

    Times  DONE

    Minus

    test_brick_is_target  DONE

    test_4_5_6_15  DONE


GUI

    Put OperandsScouts, Tags, Operators, and Blocks into Workspace.  DONE

    Why is OperandsScout getting stuck at 4, 5*6=30 ?  DONE
        Because the first pair of operands it tried didn't have any unused
        possibilities for operators, and it should have tried another pair
        (I think).

    Show seed in browser

    DeÃ«mphasize inactive edges and/or Failed nodes

    Set initial position of new nodes near their neighbors


It would be nice to...

   Print better node info for on_behalf_of etc. in an Action's repr.

   Somehow put appropriate formatting or printing code into each
   LoggingObject.


Make "all nodes are the same" scout/responder.

    Scout?

        Draw a diagram

        CoarseGrainedView

    Tag



Try cytoscape.js and cola.js

  Lay out a hard-coded graph with cola.js.  DONE

  Animate adding a new node.  DONE

  Make a container node.  DONE

  Make a 'cola' button to update layout after dragging.  DONE

  Make rectangular nodes.  DONE

  Put the label inside the nodes.  DONE

  Change the size or shape of the nodes instantly.  DONE

  Set the color of edges.  DONE

  Change the width of edges.  DONE

  Choose some nicer, lighter colors.  DONE

  Select color based on some node data attribute.

  Constraints to put sum above operator above operands.  ECCH

  Turn some nodes off and on with a button.  DONE

  Get curvy edges.  DONE:  'curve-style': 'unbundled-bezier'

  Figure out how to assign unique ids to new nodes.
    "assigned automatically on undefined"?

  Hook it up to JSON data from server.py.

    Read nodes from server.  DONE

    Read edges from server.  DONE

    Make the arrow point from the tag to the taggee.  DONE

    Set edge color according to port labels.

    Set edge weight according to port labels. 

    Set node color according to class.

  Toggle between nodes as rectangles and nodes as circles with area
  proportional to support.

  Toggle support edges on/off.


Break out tag ports/labels to a simple model spec.  DONE

  Clean that up.

Plan out a new spec

  ...and what it will take to get back to a good demo.


Next demo

  1 + 1 = 2, graphically

  t+big  Run until the next "introspectable" event.

Show the graph on the screen

  fargish.html  DONE

  Make a Python web server  DONE

  Respond to command from web browser  DONE

  Test: Make server.py talk to a subprocess via a named pipe.  DONE

  Restart the subprocess if any .py files have changed.  DONE
  # ...or if user hits Ctrl-C.

  Let the Runner object talk through a named pipe.  DONE

  Send command to a runner for Numbo  DONE

  Send JSON to web server  DONE

  Write a README explaining how to run the server.  DONE

  Click a node to see its id.  DONE

  Update displayed node info upon t+1.  DONE

  Animate only changed nodes; don't animate from scratch each timestep.  DONE

  NEXT
  Node infobox: list all edges  DONE
  Curved edges  DONE
  Edges with arrows  DONE
  Make the arrowheads grey.  DONE
  Start/end the arc at the edge of the circles.
  Update the arc radius continuously?  DONE

  Turn on/off different kinds of edges  DONE

  Make the tags appear closer to their taggees.

    Make GreaterThan's taggees show up in 'taggees'.

    Put taggee port labels in class definition.

  See support as radius of node.  DONE

  See salience as radius of node.  DONE

  Set node radius by node type: bricks big, tags small.  DONE

  Lighter colors for all node classes.

  Enter numble from browser.  DONE

  Start with the workspace centered on the screen.  DONE (sort of)

  Block, Plus, Times, nodes created by CouldMakeFromOperands: propagate
  container membership so they show up inside the Workspace.

  Show nodes offering Responses with a ring?

  See Numbo complete a solution in graphical mode!

  Correct d3height and d3width for containers.

  Anchor the Workspace? (So it doesn't slide around in the SVG space.)

  Allow the user to type Python commands referring to the graph from the
  terminal where server.py is running.


Event log: show in browser

  User selects which events to see

  Node built
  Node touched
  Support given
  Response performed


See Response urgency plotted as a timeseries?


Change Response .salience to .urgency.


Demo 5

    Stop SameNumber from retagging.

    View

      Update MemberCount.

      Update MaxMember.

      Update AdditionUpperBound.

      The View, or something attached to it, is responsible for starting
      CouldMakeFromOperands nodes.

      The View also knows when it's running out of Avail Numbers, hence
      can trigger a failure recovery.

      Replace (or supplement) BottomUpOperandScout with OperandScout(Plus) and
      OperandScout(Times), each attached to the View(Avail Number). These
      Scouts generate CouldMakeFromOperands nodes, but only with their
      preferred Operator.

    Minus

      Need a group node that holds multiple operands in sequence.

      Or, for now, implement inheritance for port_labels and just give
      Minus a left_operand and a right_operand (or 'minuend' and
      'subtrahend').

    Find upper bound of addition; favor multiplication if Target out of range.

       Q. How are we going to inhibit the CouldMakes until we've assessed the
       upper bound on addition? A. OperandScout nodes attached to a View,
       supported by something that watches the upper bound on addition and/or
       other whole-view attributes.

    Coarse-grained representation: put all the Avail numbers and the Target
    on a number line.

       Coarse-grained representation should be automatic (no codelet needed).
       Perhaps a codelet is needed to start the coarse-grained representation,
       but it should update automatically.

    In slog7, why are the saliences so high at t=28,29?

    GettingCloser tag
        Wanted should look at this tag rather than search on its own

    Wanted
        Support SameNumber->N<-CouldMake
        Support GettingCloser->N<-CouldMake
        Support CloseTo->N<-CouldMake->O<-Small
        Support the CouldMake rather than the N?

    Vary edge weights for "closer"

    TooHigh tag
        Opposition rather than support from Wanted

    HACK: Only one Decision per timestep.

    Two CouldMakeFromOperands that share one or more nodes should oppose
    each other.

    rm .candidate_nodes()

    Brick: What should it support?


Demo 2

   Mustang Sally

      1 1; 2  with Watchers as nodes
        Make 1+1=2 much more attractive than 1*1=1
            Need still better way of favoring 1+1=2, since the current way
            isn't working.
                support.py
                Consumers vs. Watchers


      default_watchers -> initial_watchers
        Create these nodes in NumboGraph's ctor

      Better logging
        Need to see Datums in FoundWanted and CombineOperands, not just
        node ids.

      1 1 1 1 1; 6  Figure out 2 * 3 = 6
         EquationWatcher
            Hacked with ctor args; internal graph
            Trigger only upon spotting result

   Something top-down
   Minus / Needs operands to be ordered
   120 1 2 3 4; 121   Figure out 120 + 1 = 121 right away  SALLY

Do Response annotations differently: Build should indicate whether it
successfully Built or not.

Don't allow multiple consumers. Or detect it and correct it if it
happens.

   Disallow consumer loops, too!

   Try writing out the current model in English-FARGish.  DONE

Don't allow a Block to consume itself.

Seek(2) and Seek(3) alone should prime the model to solve 1 1 1 1 1; 6.

   Add Consumed tag upon consuming.

   Change Consumed to Avail in cascade_fail.

----------


Main loop:
    Randomly choose a response and execute it


CouldMake
    Make the desired Number by completing the equation.


Support
    Set the edge weight in the unit test.


Bottom-up "noticing"
   
   Notice that 120 is "close to" 121.
      CloseNumbersTagger
      tag: CloseNumbers
      CloseToWantedWatcher
         start a process to build the difference

Top-down "searching"

   Make a Wanted-Block node
   When fulfilled, capitalize. E.g. did we solve the numble?
   Detect failure somehow
   Upon failure, add tags so we don't try that again

   Spreading activation to find equation to complete


Salience

   Let Watchers fade away


Design / Refactoring

   Some sort of "filter" to pass nodes through a series of criteria.
   a Nodes class that knows what graph the nodes come from.


Tools

   Single-stepper for FARG model
