Want edge-mate in to-ctx that is bound from from-ctx to a node that links
analogously from from-ctx. Want homomorphism-preserving edge-mate.


Want edge-mate with some intrinsic properties and linking properties.
Can't find node with intrinsic properties? Build one and start continuation
for linking properties. Can find one with intrinsic properties? See if it
violates linking properties. If so, build and k as before. Does it have
all linking properties? Then link to it and we're done. Otherwise link
to it and start continuation for other linking properties.

Not sure what value or class to give a node when building it? Give it a
placeholder.

Incompatible linking properties: already being bound from another node in the
ctx that we are trying to bind from.

Need to monitor nodes with continuations, and keep searching for alternative
mates for desiderata.


When starting an agent, just boost or support an existing agent that matches.


A node has a my-builder port. If the node gets tagged 'failed, it gives
antipathy to its builder. It should give antipathy to any nodes that depend on
its success.

----

Graph layers

Lowest (raw):

  make-node g attrs
  add-node
  add-edge
  remove-node

  get-node-attr
  ...

  port->neighboring-ports
  ...
  node->neighbors
  ...

  graph-set-var
  ...

  define/g
  gdo

  The above can still call upon elements of the spec, as long as there is
  a reasonable default spec.

Graph ops (little language with hooks)

  do-graph-edits

  class-of
  tag?
  members-of
  ...

FARGish (defining, accessing, and applying a spec)

  node-args->attrs
  default-name


----

FARG models tend to be accumulations of hacks (hence bug-prone). Is that so
bad, though? Aren't the brain and mind accumulations of hacks?

It's bad because it's bug-prone and not mathematically tractable. What
scientific result or hypothesis do you get?

But what if FARGish were mainly a way for hacks to get synergy? And isn't this
something that blackboard architectures should be good at? Many different
"experts", all narrow-minded, examine and edit the same workspace, sometimes
competing and sometimes cooperating.

----

What is the simplest way to express the state of a FARG model as a function of
its state on the previous timestep?

  Support, a function of desiderata

  Scout movement: bindings as function of ctx, search-items, and salience;
  activations as function of bindings, ctx, search-items, and salience.

  Salience, a function of touches

  Edits, a function of support to active nodes (and maybe of auto-tagging)

So, what gets updated each timestep are support, scout-bindings,
scout-activations, salience, and the graph. (Search-items may get updated,
too; e.g. "lowering of standards". Possibly some global parameters may get
updated, or node attributes that hold them; e.g. "temperature".)

The state and its update function are like the antecedent of a theorem. The
conclusion is that the search path tends toward certain attractors, which we
then claim are reasonable and human-like.

To make a FARG model, we want to go the other way: explicitly encode
properties of the search path, which we expect to produce reasonable
attractors; let FARGish construct an appropriate update function. The
properties of the search path that we want to state are: what causes what to
be seen first; how pressures interfere with each other constructively and
destructively. We state that by defining: the nodeclasses and their desiderata
and port linkage rules; scouts and their search-items; and the slipnet.

We expect this to search reasonably mainly because of the
cooperative/competitive binding that models analogy-making and conceptual
blends--and partly because of easy interaction between hacks, especially
"metric spaces" and "gnomes", and partly because temporal traces serve as
objects of matching and construction as well as guides to the system's
behavior ("self-description").


What properties do we think make a search reasonable?

- Biased toward the safe and prosaic, but can respond to pressures to explore
  the exotic and unlikely.

- Conceptual slippage.

- Everything interacts with everything (self-organizing criticality?).

- Analogies almost all the way down.

- Attractors due to self-description/self-monitoring? Hence self-correction.

- Parallel terraced scan.

- What makes a concept node represent a concept is not its name but a unique
  way of guiding searches (i.e. building up candidate structures, i.e. causing
  some things to be seen first and favoring some kinds of pressures).

- Some mapping to traditional logic and heuristic.




A ripple principle: For easy evolvability, a small change to one element should leave the system working even if it would be better accompanied by other, coordinated changes. Small changes should not produce catastrophes (too often).
