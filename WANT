[n ... ns : number, n.value]


external {
  numDigits(v : Integer) : Integer;
}


nodeclass number(n : Integer) {
  Integer value = n;
  display-name = n;
}

tagclass num-digits {
  me.[taggee : number] = me.(tagged -- tags).taggee;
  value : Integer = numDigits(taggee.value);
  display-name = format("num-digits-~a", n);
}

tagclass > {
  [a : number].me.[b : number] = {
    me.(greater -- greater-than).a
    me.(lesser -- less-than).b
  }
  condition { a.value > b.value }
}

tagclass > {
  [a : number].me.[b : number] =
    a.(greater -- greater-than).me.(lesser -- less-than).b;
  condition { a.value > b.value }
}

tagclass > : relational-op {
  applies-to(a : number, b : number) {
    a.(greater -- greater-than).me.(lesser -- less-than).b;
    condition { a.value > b.value }
  }
}


[a : number].>.[b : number] =
  a.(greater -- greater-than).me.(lesser -- less-than).b;
  


; unary tag
given {
  [n : number] { n.value }
} make {
  num-digits(n.value).n
}

; binary tag
given {
  [n1 : number] [n2 : number]
  { n1.value > n2.value }
} make {
  n1.>.n2
}

nodeclass container {
  me.member.[mem/s : node] = me.(members -- member-of).mem/s;
}

; as an edge:
[a : node].guides.[b : node] = a.(guidee -- guides).b;

;as a node:
tagclass guides {
  [a : node].me.[b : node] = a.(guiding -- guider).me.(guidee -- guided-by).b;
}

nodeclass trace : container {
  in {
    me.guides.[live : trace]
  } want {
    me.member.t0.member.situation.same.([t' : timestep].member.situation)
    live.member.t'
  }
}

    me.member.t0.member.situation.same.situation.member-of
    .timestep.member-of.trace

means: "When I'm tagged as guiding another trace,
find/make a t0 member of me,
find/make a situation member of that t0,
find/make a same tag connecting that situation
to a timestep t' 



nodeclass node {
  salience = INITIAL-SALIENCE;
}

; How to indicate support?

on-touch ...   ; Define what happens when a node is touched
step           ; One iteration of the main loop
nodes {        ; A way to make concrete nodes and enable FARGish code to
  ws : workspace(22, "ab")                              ; refer to them.
  slipnet : slipnet-root
}
set-up {
  [WS : ws(22, "ab")]
  [SLIPNET : slipnet]
}
set-up(brick-val/s : Integer; target-val : Integer) {
  brick.[brick-node/s : number(brick-val)]
  target.[target-node : number(target-val)]
  [WS : ws(22, "ab")].member.brick-nodes
  [SLIPNET : slipnet]
}

Need a way to make a condition "Is this node tagged X?"
tagclass brick? {
  me.[a : number] = me.(tagged -- tags).a;
}
tagclass brick {
  me.[a : number] = me.(tagged -- tags).a;
  brick?(node) = has-tag?(node, me);
}

codelet brick->available
  given {
    (not available && not consumed).[b : brick?]
  } make {
    available.b
  }
codelet brick->available
  given {
    (not available && not consumed).(problem.member.[b : number])
    brick.b
  } make {
    available.b
  }
codelet brick->available
  given {
    problem.member.[b : number]
    brick.b
    (not available && not consumed).b
  } make {
    available.b
  }
