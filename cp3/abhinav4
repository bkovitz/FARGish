permaculture


Bjarne Stroustrup's recommended languages: Java, C++, Python, Scheme, ??

unify(I, J)
unify(J, 2)
what is I? 2

unify(f[I, J], f[4, 6])
what is I? 4
what is J? 6


What to do today?
1. Fix bug in painter-creation.  DONE
2. Implement matchcount.  DONE
3. Implement Inside and FilledWith; generate p2 and p4. DONE
4. Run p2 and p4.
5. Figure out how to make p5


1. Ask the Predicate to step through left_substs and right_substs.
2. Make the Painter know its principal arguments, and have code that steps
differently according to the type of the principal argument.

------------------------------------------------------------------------

'____a___a___'

p1a
  Apart[D=4, I=5, J=9]
  Same[I, J]

  Apart.spec_left_to_right(c, {D=2, I=1}) -> {D=2, I=1, J=3})

p2   must hold some record that P=p1a in the original situation
  Inside[P, K]
  FilledWith[K, 'j']

Running p2 yields:

  Given P=p1a(I=5, J=9), what should K be?

  Inside[P=p1a] spec_left_to_right yields:

    K=6   
    K=7
    K=8

  FilledWith, for each of those values of K, yields:

    K=6   PaintAt(6), PaintValue('j')
    K=7   PaintAt(7), PaintValue('j')
    K=8   PaintAt(8), PaintValue('j')


'___j__'

Running p2 yields:

    Given K=4, what should P be? Must return an ActionSpec indicating:
        
        P=p1a I=2 J=6
        P=p1a I=1 J=5

NEXT problem to solve:

Two ways to find all the values of K:
1. spec_left_to_right() loops through K, and returns multiple ActionSpecs.
2. The caller of spec_left_to_right() loops through all values of K, and
   spec_left_to_right() only checks the values in the current Subst.


Hypothetically:
Inside      returns specA, specB       
FilledWith  returns specFA, specFB

Fhould we get 4 PainterActions?
    specA specFA
    specA specFB
    specB specFA
    specB specFB
Or should we get 2 PainterActions?
    specA specFA
    specB specFB

WANT

    for su in all_substs(ws, all_predicates):
        for predicate in predicates:
            tu = su
            specs = set()
            for tu, spec in predicate.spec_left_to_right(ws, su):
                specs.add(spec)

    for su in cycle_through_all_variables(ws, all_predicates):
        for predicate in predicates:
            match spec_left_to_right(ws, su):
                case ActionSpec():

    (all_predicates, su) -> ActionSpecs
                    
------------------------------------------------------------------------

NEW VERSION, where caller to predicate cycles through all variables

'____a___a___'

p1a                 In the workspace.
  Apart[D=4, I=5, J=9]
  Same[I, J]

  Apart.spec_left_to_right(c, {D=2, I=1}) -> {D=2, I=1, J=3})

p2  L='j'   must hold some record that P=p1a in the original situation
  Inside[P, K]
  FilledWith[K, L]


Asking p2: Given P=p1a, what should K be?
Really: is this (P, K) combination OK?

  cycle_through_all_variables()   principal_arguments: P, K

    Inside.left_to_right():      FilledWith.left_to_right()

      P=p1a K=1   None
      P=p1a K=2   None
      P=p1a K=3   None
      P=p1a K=4   None
      P=p1a K=5   None
      P=p1a K=6   PaintAt(6)     PaintValue('j')
      P=p1a K=7   PaintAt(7)     PaintValue('j')
      P=p1a K=8   PaintAt(8)     PaintValue('j')
      P=p1a K=9   None
      P=p1a K=10  None
      P=p1a K=11  None
      P=p1a K=12  None


Or, let Inside.left_to_right() return an Iterable of (Subst, ActionElem):

  cycle through left principal argument (P)

            Inside.left_to_right():             FilledWith.left_to_right()

    P=p1a   (K=need_to_cycle(f), PaintAt(K))    PaintValue('j')

  When the loop that goes through all values of P finishes, we have this
  ActionSpec:

    need_to_cycle(K, such that f), PaintAt(K), PaintValue('j')

  We convert this ActionSpec into ActionProposals. The function f will
  reject most of them. We have to evaluate PaintAt(K) and PaintValue('j')
  for each possible value of K:

          f     PaintAt(K)  PaintValue('j')

    K=1   No 
    K=2   No
    K=3   No
    K=4   No
    K=5   No
    K=6   Yes   PaintAt(6)  PaintValue('j')
    K=7   Yes   PaintAt(7)  PaintValue('j')
    K=8   Yes   PaintAt(8)  PaintValue('j')
    K=9   No
    K=10  No
    K=11  No
    K=12  No

Each pair of PaintAt and PaintValue objects will become part of an
ActionProposal.


--------------------

'_j___'   K=2   There are currently no painters in the workspace.

Asking p2: Given K=2, what should P be?

  cycle through left principal variable, K:

    Inside.left_to_right():                FilledWith.left_to_right()

      K=1    MakePainter(P based on p1)    None
      K=2    MakePainter(P based on p1)    OK
      K=3    MakePainter(P based on p1)    None
      K=4    MakePainter(P based on p1)    None
      K=5    MakePainter(P based on p1)    None


      K=1   LoopVariable(I), LoopVariable(J), condition="K inside I,J", MaybeMakePainter(p1, I, J)    None
      K=2   LoopVariable(I), LoopVariable(J), condition="K inside I,J", MaybeMakePainter(p1, I, J)    OK
      K=3   LoopVariable(I), LoopVariable(J), condition="K inside I,J", MaybeMakePainter(p1, I, J)    None
      K=4   LoopVariable(I), LoopVariable(J), condition="K inside I,J", MaybeMakePainter(p1, I, J)    None
      K=5   LoopVariable(I), LoopVariable(J), condition="K inside I,J", MaybeMakePainter(p1, I, J)    None

  When the loop that walks through K is done, we have one ActionPrepoposal
  object (though in other situations we might get many). Now we extract its
  LoopVariables, cycle through their Cartesian product, evaluate the other
  elements:

              condition(I<K<J)  MaybeMakePainter(p1(D=2), D, I, J)
    I=1 J=2     False             
    I=1 J=3     True              MakePainter(D=2, I=1, J=3)
    I=1 J=4     True              None
    I=1 J=5     True              None
    I=2 J=3     False
    I=2 J=4     False
    I=2 J=5     False
    I=3 J=4     False
    I=3 J=5     False
    I=4 J=5     False
    
  
The new idea from this conversation: There are two loops. In the first loop,
each Predicate returns up to *one* PreproposalElem. We then coalesce those
PreproposalElems into a Prepoposal. Then we loop through all the Prepoposals,
and for each Prepoposal, we loop through the Cartesian product of all the
LoopVariables. In that inner loop, we evaluate the Prepoposal elements and
come up with Proposals.

Another idea: Let ActionPrepoposals sit in the workspace. The other processes
can look into converting them into Actions, i.e. painting cells and creating
painters. This means that an ActionPrepoposal is a full citizen of the
workspace.

IncompleteProposal


'____j__'  K=5    Want p1a(I=4, J=6)
    
--------------------


'aja__'

p1 and p2 are in the workspace. Now p5 needs to see it and create p4.

Want at end of this process:
  p4(P=p3, K=4)
  'q' at cell 4
  p3(I=3, J=5)
  'b' at cell 5

Asking p5, given P=p2, what should Q be?

        SameSpatialRelation              ConsecutiveLocations                Paints[P, 'j']  Paints[Q, 'q']

  P=p2  ProposedPredicate(Inside[P, K])  ProposedAnchors(Consecutive[P, Q])  True            ProposedPredicate(FilledWith(K, L)), ProposedPainterVar(L, 'q')

When the loop that walks through P is done, we have one ActionPrepoposal
object (thought in other situations we might get many). 

Maybe make an IncompletePainter(p4, ProposedAnchors=Consecutive[P, Q]).

Next step: We need a Q. Q will be another IncompletePainter:
IncompletePainter(p3, I=?, J=?, Consecutive


How, when we choose anchors for p3, do we deduce that I=3? How do we know
that I=3 is "consecutive" with p2?


Idea: Loop through all possible values of n for Overlap[n].

Idea: Consecutive: limited to snippets. p4 and p3 will occupy a new snippet.
p1 and p2 will occupy one snippet. Then in response to ConsecutiveLocations,
we create a new snippet to hold the new p4 (and p3). From then on, we are
only concerned with moving the snippet around and filling it.

Associate the Incomplete p4 with a new snippet:

[a j a]_ _
      [_ _]
    [a _ _]   <-- assume this is the new snippet (how the model figures
                  this out is still murky)

If the model is unable to fill the snippet using the IncompletePainter,
then the IncompletePainter gets rejected.

Our solution to most problems seems to be: loop a variable through all
possible values, and see which ones meet some condition. Our other
solution is to create an Incomplete object, to delay that loop.

Ask Incomplete p4, what could your P and K be in this new snippet?

  some predicate method must "complete me", "fill the incomplete part"

  P=? K=3    
  P=? K=4
  P=? K=5


Idea: Combine p3 and p4 into a single painter, for some purposes.



---

How does a p5 get "detected" (created from scratch)?


--------------------

Three main acts involving painters:

1. See a relation between two things in the workspace, make a painter that
recreates it.  See a complete configuration, make a painter.
2. See the left anchor of a painter (plus a little more), paint the right
anchor.  See a partial configuration, run a painter to complete it.
3. See the right anchor of a painter (plus a little more), paint the left
anchor.  See a partial configuration, run a painter to complete it.


------------------------------------------------------------------------

Could there be a single 'complete me' method on every Predicate?

    match (su[I], su[J]):
        case (int(i), int(j)):
            if i-j relation is OK, return NullCompletion, i.e. "OK"
            else return BottomSubst (or a diagnosis)
        case (int(i), None):
            return Completion for J    PaintAt(i + D)    or diagnosis
        case (None, int(j)):
            return Completion for I    PaintAt(j - D)    or diagnosis
        case (None, None):
            return NeedDefined(I, J)

    match (su[P], su[K]):
        case (Painter() as p, int(k)):
            if anchors of p are OK, return NullCompletion
            else return BottomSubst
        case (Painter() as p, None):
            return IncompleteActionElement(LoopVariable(K))
        case (None, int(i)):
            return PainterCompletion(LoopVariable[I], LoopVariable[J], I<K<J, MakePainter(p1, I, J))
        case (None, None):
            return NeedDefined(P, K)  or perhaps exploit information like ConsecutiveLocations to cook up a painter

    match (su[P], su[Q]):
        case (Painter() as p, Painter() as q):
            if painters have the right relationship, return NullCompletion
            else return BottomSubst or diagnosis
        case (Painter() as p, None as q):
            return ProposedAnchors(Span(p) + 1, ...) or whatever
        case (None, Painter() as q):
            return ProposedAnchors(Span(q) - 1, ...) or whatever
        case (None, None):
            return NeedDefined(P, Q)

Predicate.complete_me(su, ws) returns a Completion. There may be a big
variety of Completion objects. Some of them can be completed in the loop
following the loop through the Predicates. Some of them might need
objects to persist in the workspace a while to search for possible
completions.

The above are painters completing an incomplete configuration. Could we also
complete an incomplete painter?


When we ask a Predicate to "complete me", there are three kinds of answer possible:

1. It's already complete.
2. Here is how to complete it.
3. It's so incomplete that I don't know where to begin.


------------------------------------------------------------------------

                                              left to right           right to left
Relation between canvas cells:
  Spatial relation  Apart                     PaintAt                 PaintAt
  Value relation    Succ                      PaintValue              PaintValue

Relation between painter and canvas cell:
  Anchor-to-index relation  Inside            Loop to find K, I<K<J   Loop I, J; MakePainter(based on p, I, J)
  Index-to-value relation   FilledWith        PaintAt, PaintValue     Loop to find K (cell must contain 'j')    

Relation between painters:
  Predicate relation  SameSpatialRelation
  Anchor relation     ConsecutiveLocations?
  Indirect relation   ConsecutiveLocations?
