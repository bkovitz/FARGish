ABSORB ajaqb
       S1          S2='aja' S3='aqb'

1. Repetition detector:
   R1=Repeat(S2, D1, F1, E1)
   S2=Snippet(inside=S1, range=(1, 3))
   D1=Seed(L1, K1)
   L1='a'
   K1=1
   F1=Same
   E1=Replace(K2, L2)
   K2=2
   L2='j'

2. Repetition detector:
   R2=Repeat(S3, D2, F2, E2)
   S3=Snippet(inside=S1, range=(3, 5))
   D2=Seed(L3, K3)
   L3='a'
   K3=1
   F2=Succ
   E2=Replace(K4, L4)
   K4=2
   L4='q'

   Are S2 and S3 complete? Do they need something to paint their 'range' or
   'inside' arguments?

   S1 is now complete because it's fully broken into subsnippets--a necessity
   if you can't be filled by a single repeater.

3. Overlap detector:
   OV1=Overlap(S2, S3)   default amount=1?

   Record the fact that the overlap happened on letter 'a'?

   Overlap can't completely produce one argument given the other, because it
   doesn't know how long they are. Therefore, NEW PRINCIPLE: painters
   can't necessarily fully recreate one argument given the other; all they
   need to do is partially recreate one argument given the other.

4. Sameness detector:
   Q1=Same(D1, D2)

5. Sameness detector:
   Q2=Same(E1, E2, E3)    Same .index, different .letter
   Q3=Same(E2, E1, E4)    Same .index, different .letter
   E3=Replace(content=L4)
   E4=Replace(content=L2)

WRONG  The operations F1 and F2 are different (Same and Succ)
6. Sameness detector:
   Q4=Same(F1, F2)

WRONG
7. Sameness detector:
   Q5=Same(.op, R1, R2, E2)

WRONG
8. Sameness detector:
   Q6=Same(.op, R2, R1, E1)

REGENERATION from 'a____'
                   S1'='a____'
                   S4 starts as 'a__' (1..3)
                   S5 starts as 'a__' (1..3)
                     S4 and S5 compete because they cover the same span.
                   S6 starts as '___' (3..5)

1. R1 detector sees the 'a'
   B1=BasedOn(R1, R3)    preimage, image
   R3=Repeat(S4, D1, F1, E1)   The only difference is .snippet
   S4=Snippet(inside=S1', range=(1, 3))   wants to paint 'aja__'

   Does R1 need to be copied to the workspace? I don't think so; R3 is in
   effect that copy.

   TODO: How do we decide on the length of S4?

2. R2 detector sees the 'a'
   B2=BasedOn(R2, R4)
   R4=Repeat(S5, D2, F2, E2)   The only difference is .snippet
   S5=Snippet(inside=S1', range(1, 3))   wants to paint 'aqb__'  (bad painter)

   TODO: How do we decide on the length of S5?

3. Now we try build analogously from R3.
   What else other than R3 refers to the arguments of R1?
      OV1 refers to S2
      Q1 refers to D1
      nothing refers to F1   How do we determine image(F2)?
      Q2 refers to E1
      Q3 refers to E1
   We queue these up for building the analogy 'forward'.

3. Since OV1 refers to S2, we construct an analog of OV1:
   OV2=Overlap(S4, _image(S3))    S4=image(S2)

4. Since Q1 refers to D1, we construct an analog of Q1:
   Q1'=Same(D1, _image(D2))

5. Since Q2 refers to E1, we construct an analog of Q2:
   Q2'=Same(E1, _image(E2), E3)   This means _image(E2) = E1 + E3

6. Since Q3 refers to E1, we construct an analog of Q3:
   Q3'=Same(_image(E2), E1, E4)   This means E1 = _image(E2) - E4

7. Now we need to fill those blanks by cooking up the needed images.
   What else refers to preimage(image(S3)), i.e. S3?
      R2.snippet = S3
   Therefore we need to make an image of R2.
   B3=BasedOn(R2, R5)
   R5=Repeat(_image(S3), _image(D2), _image(F2), _image(E2))

8. Now we have two blanks that refer to _image(S3). Just create S6:
   S6=Snippet(inside=S1', range=(3, 5))
   Now we can fill in all blanks that refer to _image(S3):
   OV2=Overlap(S4, S6)   Overlap goes left to right.
   R5=Repeat(S6, _image(D2), _image(F2), _image(E2))

9. What is image(D2)? Who can paint it? Q1' can:
   Q1'=Same(D1, D3)   We create D3.
   D3=Seed(L1, K1)
   Now we can fill in all remaining blanks that refer to _image(D2):
   R5=Repeat(S6, D3, _image(F2), _image(E2))

10. What is image(F2)? Nothing outside of R2 refers to F2, except R4.
   SOMEHOW we must exclude R4 from consideration. Since F2 has no
   painter for it, we just duplicate for its image:
   R5=Repeat(S6, D3, F2, _image(E2))

11. What is image(E2)? Q2' can paint it. And so can Q3'.
   Let's see what Q2' says:
   Q2'=Same(E1, E2, E3)   TODO Isn't this redundant, because Q2' can't ever
                          make its second argument anything but E2, given
                          its first and third arguments?
   _image(E2)=E2
   Now we can fill in all remaining blanks that refer to _image(E2):
   R5=Repeat(S6, D3, F2, E2)
   
   TODO What if Q3' runs? What if it has a different opinion about _image(E2)?

12. R5 can paint even though S6 is empty, because D3 specifies 'a'.
   (If we had started from 'm____', D3 would have letter='m'.)
   S6='aqb'
   S1'='a_aqb'  (as overlaid by S4 and S6)

13. Now let's say that R4 starts looking to complete its analogy. R4 is
   anchored at S5 (S1' 1..3), conflicting with S4.
   What other than R4 (and R5--how to exclude R5 is still UNCLEAR) refers to
   the arguments of R2?
      OV1 refers to S2
      Q1 refers to D2
      nothing refers to F2
      Q2 refers to E2
      Q3 refers to E2

14. Since OV1 refers to S2, we construct an analog of OV1:
      OV3=Overlap(_image(S2), S5)   S5 is image(S3)

15. Now let's ignore the other analogous painters and just see what OV3 comes
   up with for _image(S2).
      S7=Snippet(inside(S1', range(-2, 1)))

16. Now we see that S7 cannot be constructed. Therefore we create a failure
   and a snag:
      FA1=Failed(OV3, SN1)
      SN1=IndexBeyondLeftBoundary(S1', ? S7.range)  NEEDS WORK

   So, R4 has run into a snag. (We need to trace OV3 to R4 to blame it.)
   The model could look for ways to fix the snag, like extending the canvas
   to the left, or making a mirror image of the Overlap. How can that process
   be drowned out by the good painter R5?

   R5 probably will paint first. That will increase the clarity of S6.
   Do we get any circular painting now? What else could paint R4?
   Or could we just go on the basis of clarity? What else paints a 'j'
   in S6.2? There is only one painter that paints at S6.2, and that's R4.

   NEXT: Draw a graph of who paints what.
   

   

If R3 paints now, we have S3='aja'.
To go: Overlap(R3, R4), hence construct R4.

Should we have an aversion to using the same painter twice? Would favoring
use of R2' exclusively as an overlapmate with R1' make tagging Inextreme
unnecessary?


What about this?
	R1=Repeat(S2, D1, F1, E1)
   R3=R1 + .snippet(S4) + .seed.letter(L3)
   L3='m'
   The delta, .seed.letter, would propagate through and result in making D3=Seed(1, 'm')


mjm__

ajjja___b


Could we limit the search for referrers to a preimage to those that pertain to
a given span in the canvas? Or maybe the model should have some probability of
trying to use an "illicit" painter as a referrer-- people sometimes make odd
"linkage" mistakes when constructing analogies.

An image of a constant, and that has no painter relating it something else,
should probably be propagated in an analogy without constructing an image.
That is, image(X) = X. (Use the same variable.) 

Is the image:preimage relationship always one-to-one?
