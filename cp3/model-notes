Each proto-painter needs a set of criteria for what it takes to be complete.

A painter is complete when the model has all the information needed to run
the painter somewhere other than where it was made, i.e. changing one its
arguments and blanking the other.

It appears that since some painters are complete when they start, we don't
get a quadratic explosion of metapainters.


Same(addr, addr)
   Needs relation between addrs. (Because Same is a value relation.)
Same(op, op)
   Complete. (Because we don't know about relations between predicates. Or
   do we? What about Succ-Pred, the "mirror" relation?)

OtherHandSameIndex(addr, addr)
   Complete. (Because OtherHandSameIndex is a relative spatial relation:
   OtherHandSameIndex can construct addr1 from any new addr2 and vice versa.)

OtherSide(addr, addr)
   Complete. (Because OtherSide is a relative spatial relation.)

Repeat(addr, start, op)
   Needs source outside addr for start.
   Needs painter for op (unless op was taken from source).
   Needs painter for addr.

Copy(letter, addr)
   Needs source for letter?
   Needs painter for addr.





   a1=a(x, y)
   b1=b(a'(x), a'(y))
   c1=c(b(a'(x), b(a'(y))


"What else refers to both X and Y?" might be an important idea. This search
produces painters that might produce a relation between something else that's
related to X and Y, which can then be used to fill a blank.


Filled arguments in incomplete painters give us something to build from.
Blanks in painter arguments don't give us anything to search for. We have
to exploit other parts of the painter, like at least one filled argument.


Some searches:

1. What relates to this painter?
2. What relates to this variable?
3. What relation can be found for these two constants?
4. What other painters have this relation but different arguments?
5. What other painters have these same arguments?
6. What other painters have at least one of these arguments?
7. What pairs of arguments fit this proto-painter? "Detection"
8. What existing painters relate two arguments of given data types?
   E.g. "I need a relationship between snippets."


Working backward ('pull') is hard. Working forward ('push') is easy. So, when
working backward, try to trigger a forward cascade that might lead to a
solution. (This is certainly how solving cryptograms works.)

When a "foothold" looks promising, that means that you think that if you
started working forward from it, it might lead to filling the current blank.
