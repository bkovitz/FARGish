'abc->abd; ijk->?'
 S1   S2   S3   S4

1. Repetition detector:
   R1=Repeat(S1, D1, F1)
   D1=Seed(L1, I1)
   L1='a'
   I1=1       a relative address
   F1=Succ

2. Incomplete:
      R1    lacks painters for .addr, .seed, .op
      D1    lacks painters for .letter, .index
   Repetition detector:
   R2=Repeat(S2, D2, F2)
   D2=Seed(L2, I2)
   L2='a'
   I2=1
   F2=Succ+E1
   E1=Exception(G1, I3)
   G1=Skip     "G" for "flaw" since F is in use
   I3=3        a relative address

3. Incomplete:
      R1    lacks painters for .addr, .seed, .op
      D1    lacks painters for .letter, .index
      R2    lacks painters for .addr, .seed, .op
      D2    lacks painters for .letter, .index
      F2    lacks painter for E1
      E1    lacks painters for .flaw, .index

   We need a notion of incompleteness that requires a source for D1 that is
   outside of S1. How do we represent this? If we include it in D1, then
   D1 has to know about S1. Is that OK? Should we include it in R1?
   In other words, which is incomplete, R1 or D1? For now, let's just
   ignore this and see if R4 can get its seed without it.
      D1(S1, L2, I2)

      Could a Repeat have multiple seeds?

   Sameness detector:
   Q1=Same(L1, L2)  completes D1.letter, D2.letter

4. OtherSide detector:
   Q2=OtherSide(S1, S2)   completes R1.addr, R2.addr

5. Sameness detector:
   Q3=Same(I1, I2)      completes D1.index, D2.index

6. Sameness detector:
   Q4=Same(F1, F2, E1)  completes R1.op, R2.op

7. Sameness detector:
   Q5=Same(D1, D2)      completes R1.seed, R2.seed

Nothing else seems completable, so we begin regeneration. We don't necessarily
need a detector for "nothing else seems completable"; the model can just plow
forward with regeneration before absorption is complete.

7. Repetition detector:
   R3=Repeat(S3, D3, F3)
   D3=Seed(L3, I4)
   L3='i'
   I4=1
   F3=Succ

8. R1 detector:
   #Q5=Same(R1, R3, .addr, .seed) ?
   Tag R3 += BasedOn(R1)
   B1=BasedOn(R3, R1)

   Now we want to build from R3 by analogy with R1.

9. What painters refer to R1's arguments? Q2, Q4, Q5.
   Make analog of Q2:
   Q2'=OtherSide(S3, _) via B1

10. Make analog of Q4:
   Q4'=Same(F3, _, _) via B1   STILL UNCLEAR: How will we make analog of E1?

   For now, let's just copy E1 without modification: Q4'=Same(F3, _, E1)

   E1 has no painters, so just referring to it is our only option.

11. Make analog of Q5:
   Q5'=Same(D3, _) via B1

   To fill the blank, Q5' must create a new variable, D4. But see below for
   how this variable could already be created.

12. Complete Q2':
   Q2'=OtherSide(S3, S4)

   What referred to the preimage of S4, i.e. S2? R2. Therefore we also create
   an analog of R2:
   R4=Repeat(S4, _, _)
   B2=BasedOn(R4, R2)

   Should creating a new, analogous painter happen only with repeaters?

13. Complete Q4':
   Q4'=Same(F3, F4?, E1?) via B2? B1?

   How do we put F4 into R4?

   preimage(F4)=F2  referrers(F2)=R2,Q4  Therefore 

   Since BasedOn(R4, R2) and Relation(F1=R1.addr, F2=R2.addr),
   we have Relation(image(F1), image(F2)) and R4=Repeat(_, _, image(F2)).

   Do we need BasedOn(F4, F2)? I don't think so.

   image(R2) = Repeat(image(S2), image(D2), image(F2)) = R4
   ^-- Now that's the isomorphism.

      image(via: BasedOn, var: Variable) -> Variable

   So, once we have a variable that is based on F2, we plug it in to R4.op.

   Each of these images comes via B2. Or is it B1? Or both?

   R4 is actually R2' via B1. So, all these images came via B1.

   Do we only get a BasedOn when one repeater 'detects' another?
   Should the BasedOn be between S1 and S3 rather than R1 and R3?

   Maybe: BasedOn(R3, R1, .op), meaning that .op is the same but the remaining
   arguments are different. This would necessitate exact sameness of the
   basis of a BasedOn, though. If we create the BasedOn object and the new
   repeater at the same time, we can simply fill in all the known variables of
   the repeater, regardless of how they were derived.

14. All:
   R1=Repeat(S1, D1, F1)
   D1=Seed(L1, I1)
   L1='a'
   I1=1
   F1=Succ
   R2=Repeat(S2, D2, F2)
   D2=Seed(L2, I2)
   L2='a'
   I2=1
   F2=Succ+E1
   E1=Exception(G1, I3)
   G1=Skip
   I3=3
   Q1=Same(L1, L2)
   Q2=OtherSide(S1, S2)
   Q3=Same(I1, I2)
   Q4=Same(F1, F2, E1)
   Q5=Same(D1, D2)

   R3=Repeat(S3, D3, F3)
   D3=Seed(L3, I4)
   L3='i'
   I4=1
   F3=Succ
   B1=BasedOn(R3, R1)
   Q2'=OtherSide(S3, S4)
   Q4'=Same(F3, F4, E1)
   Q5'=Same(D3, _)         incomplete
   R4=Repeat(S4, _, F4)    incomplete
   B2=BasedOn(R4, R2)
   
   Q5' can complete itself:
   Q5'=Same(D3, D4)

   D4 is image(D2), so R4 refers to it:
   R4=Repeat(S4, D4, F4)

15. Now R4 paints S4 and the analogy is complete.


When we create the painters with blanks:
   Q2'=OtherSide(S3, _) via B1
   Q4'=Same(F3, _, E1)
   Q5'=Same(D3, _)
do we already know which blanks will refer to the same variable? If so, we
should just create the new variables right away and declare the variables
blank. We do know what is an image of what:
   Q2'=OtherSide(S3, image(S2)) via B1
   Q4'=Same(F3, image(F2), E1)
   Q5'=Same(D3, image(D2))
   R4=Repeat(S4, image(D2), image(F2))
but we don't already know that image(S2)=S4, which will not need a new
variable. But we can at least put 'image(X)' in the blanks. Then, when we
do create a new variable, we can easily see what else refers to it.

Could we start by setting F4 to _? Then when q4' sets F4, R4 automatically has
F4.
   R4=Repeat(S4, D4, F4)
   F4=_ image(F2)

Could we start by setting S4 to _?
   R4=Repeat(S4, D4, F4)
   S4=_ image(S2)
No, because S4 is already defined: it's the 4th snippet.
But, we could define S5 like this:
   R4=Repeat(S5, D4, F4)
   S5=_ image(S2)
   Q2'=OtherSide(S3, S5)
and then let Q2' complete itself:
   S5=S4
This method should work, but it creates an extraneous equation, S5=S4. Also,
having blanks in painters seems nice. So, we might prefer the other method,
which is that when you complete a painter with a blank, you look for all the
other painters with "the same" blank, i.e. defined as image(same_thing). So
the process goes like this:
   R4=Repeat(_ image(S2), _ image(D2), _ image(F2))
   Q2'=OtherSide(S3, _ image(S2))
R4 can't complete itself (fill its blanks). Q2' can complete itself. It
becomes:
   Q2'=OtherSide(S3, S4), image(S2)=S4
and then we search for all painters with "_ image(S2)" as an argument, and
replace it with S4. THIS IS THE BETTER WAY.

Should BasedOn include a list of all the arguments that need to be filled in?


Repeat(S3, D3, F3)  If S3 is filled with letters, we can make D3 and F3
   (assuming that S3 is filled with a repetitive pattern). Givem D3 and F3,
   we can fill S3. So, Repeat does sort of follow the principle of painters:
   "Given one argument, I can reconstruct the other."
Repeat(S3, Z3) where Z3 is a "repetition spec": (D3, F3). Might a repetition
   spec be easier to work with for adding exceptions?
   Same(Z1, Z2, E1)  No: this assumes that the seeds as well as the operations
      of Z1 and Z2 are the same.
   SameOp(Z1, Z2, E1)
   Same(.op, Z1, Z2, E1)  Could Same take an argument saying that Z1.op and
      Z2.op are the same, but Z2 has the exception E1?
   

NEXT: Need to do this 'live' at a whiteboard.
