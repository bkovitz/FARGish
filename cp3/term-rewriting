current expression
  matches a reduction rule
new current expression
  matches a reduction rule
new current expression
  . . .

Each reduction goes  lhs -> rhs. The lhs found in the current expression is
replaced by rhs.

In the c&p model, we don't want to replace, we want to complete. (Maybe there's
no difference.)


----------

aa
Same[1,2]

aba
q1=Same[1,3]
Inside[q1,'b']


C1='a' C2='a'
Same[1,2]

C1='a' C2='b' C3='a'
q1=Same[1,3]
q2=Inside[q1,'b']


adfskfghdjshgjkhgjfdhjkghfjdkha
Same[1,30]


In a typical term-rewriting system (including Mathematica), the thing to be
reduced is a tree-structured expression (identified, brackets, arguments). In
c&p, the thing to be reduced is a set of stuff, in no particular order. Even
the items in the canvas cells can be scattered all over the canvas.

Absorption
ajaqb
12345

1. p1 = Same[1,3], Span[1,3], Letter['j',2]
2. p3 = Succ[3,5], Span[3,5]
3. p2 = Inside['j', p1]
4. p4 = Inside['q', p3]
5. SameSpatialRelation[p2, p4]
6. ConsecutiveSpans[p2, p4]  <-- indirect, via p1 and p3

In a typical term-rewriting system, the subexpression matched is replaced by
something new. In c&p, we usually add something to the set of stuff.


IDEA: Let the "current thing" include a set of predicates that indicate
what is *noticed* right now. You have to notice Same[1,3], Span[1,3], and
Letter['j',2] all at once to then notice Inside[...]. The set of things
noticed might fluctuate as noticed things fade out and new things get
noticed.

How do we notice something? We can have a set of predicates (as in spike3)
and a set of focal points that rove around; keep trying the set of predicates
on the current set of focal points.

IDEA: Completions could be full citizens of the "current thing".  When the
model recognizes something, it adds a Completion.

IDEA: Store constants in the predicate instances in every painter. But when
we create an incomplete painter, chance the constants to variables. Then,
a painter containing a variable is incomplete and therefore looks for
constants to fill the variable.

IDEA: When we start looking for a way to build p1', we make a copy of p1 with
some or all constants changed to variables. Start by changing indices to
variables; then move to constants that mean things like distance (D in Apart).

IDEA: Two variable types are LeftIndex, RightIndex. Give every variable a
type that maps to a variable (pretty much implicit in spike3).

How can we get a predicate to construct part of a painter?

NEXT: Walk step by step through building p4' and p3'. What are all the 
Completions and Actions?

What are all the ways that something could be incomplete? And what are all the
ways it could be completed?



Every variable is something that needs to be completed, by replacing it with
a constant. Each completion comes from a rewriting rule?



_j___
FilledWith[2, 'j']   predicate match, K=2, L='j'
This predicate is part of p2, so we try to run p2 with K=2, L='j'.
p2's other predicate is Inside[P, K], where P has an AnchorAttribute basing it
on p1. So, we try to run Inside[P, K].complete_me(), and it makes p1'.
Because p2 succeeded in running, we add p2 to the workspace.

_j___  p2, p1'
p1' must run, though not necessarily right away. Succ[I=1,J=3] wants something
in I or something in J, but there are only blanks there. However, p1's
AnchorAttributes can supply an 'a'.

aja__  p2, p1'
p5 must wake up because p2 is recognized. We call p5.complete_me(P=p2), so
p5 tries to create Q. SameSpatialRelation supplies PainterPredicate[Inside].
ConsecutiveLocations supplies PainterTemplate[p4] and
RequiredPainterAttribute[ConsecutiveLocations[p2, NEW_PAINTER]].


p5[P=p2, Q=p4]
   P=p2, Q=?   Q will have Inside, be based on p4, and will be consecutive with
               p2.

At this point, we can't make p4'[P=?,K=?] because we don't have a p3' and we
don't know where K should be. So, we create IncompletePainter[BasedOn[p4],
Inside, ConsecutiveLocation[p2, THIS_PAINTER]].

aja__  p2, p1', p5, IncompletePainter[p4']
Since p4 takes arguments P and K, we can search for possible values for these.
Can we deduce K from Inside, ConsecutiveLocation[p2, THIS_PAINTER]? No.
Can we deduce P from Inside, ConsecutiveLocation[p2, THIS_PAINTER]? Partly.
Because Inside in p4 refers to P=p3, let's create a p3' and find values for
its arguments I, J. So, let's loop through all possible values of I, J and
ask, of each one, if it is Consecutive with p2[I=1,J=3]:

  I=1 J=2  No
  I=1 J=3  No
  I=1 J=4  No
  I=1 J=5  No
  I=2 J=3  No
  I=2 J=4  No
  I=2 J=5  No
  I=3 J=4  Yes
  I=3 J=5  Yes
  I=4 J=5  Yes

Now let's see which of these I,J pairs match Inside[P,K]. Given I,J, what
would K be?

  I=3 J=4  None
  I=3 J=5  K=4
  I=4 J=5  None

Therefore p4' will have [P=p3' (not yet created), K=4]. And therefore we can
ask p4' to paint p3'. SOMEHOW the Inside.complete_me() code must allow the
new spatial relation to override the one in p4.


IDEA: If we could specify all the elements that need to be completed, then
code could examine them all and see if there is any way to complete one more.
What if we could describe each completable element in terms of what it could
provide for another?

We could have little code snippets that all have arguments of the form
"Given X, I can give you Y." Then some master subroutine can match what's
needed to what can provide it.

Apart:
    Given I,J, give OK
    Given I, give J
    Given J, give I

Same/Succ/Pred:
    Given @I,@J, give OK
    Given @I,J give @J
    Given I,@J, give @I

Inside:
    Given P,K, give OK
    Given P.span, give K
    Given K, give I,J
    Given K, give P    <-- will create incomplete P, which needs I,J
             allow caller to pass an incomplete P

FilledWith
    Given K,L, give OK
    Given K,L, give @K
    Given @K, give L

SameSpatialRelation
    Given P,Q, give OK
    Given P, give Q  or maybe  Given P.spatial_relation, give Q.spatial_relation
    Given Q, give P  (as above)

ConsecutiveSpans
    Given P,Q, give OK
    Given P,P.owner, give Q.template,Q.painter_relation
    Given Q,Q.owner, give P.template,Q.painter_relation
    Given I1,J1,I2,J2, give OK
    Given J1, give I2
    Given I2, give J1

Given P, give Span


Given a snippet, give two chunks
Given a snippet, give a leftmost chunk
Given I, give @I
Given LeftMost, give @LeftMost

Each given or generated item is like an address. Could we have addresses of
addresses? Can the whole system consist of finding a chain of converters to
get from A to B, via perhaps many levels of indirection, including thinking
up what addresses to look for?


NEXT: Work out the action of the above "completers" on ajaqb, a____, m____, and
_j___.

IMPLEMENT: Absorb 'aja' and regenerate from any one letter.

a____
Given I=1, get J=3
Given @I='a',J=3, get @J='a'
