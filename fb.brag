#lang brag

farg-spec : elem*

/elem : IN IDENTIFIER /";"
;      | IN IDENTIFIER /"(" arg /")" /";"
      | IN IDENTIFIER /"(" arg ("," arg)* /")" /";"
      | IN /"{" IDENTIFIER /"}"

;farg-spec : fargish-elem*

/fargish-elem : nodeclass-definition
;              | connection-definition
;              | codelet

;nodeclass-definition
;  : NODECLASS IDENTIFIER args ancestors /"{" nodeclass-elem* /"}"
;  | NODECLASS IDENTIFIER args ancestors /";"
nodeclass-definition
  : NODECLASS IDENTIFIER args /";"
  | NODECLASS IDENTIFIER /";"
;  | NODECLASS IDENTIFIER ancestors nodeclass-body
;  | NODECLASS IDENTIFIER args ancestors nodeclass-body

nodeclass-body
  : /";"
  | /"{" /"}"

; BUG in brag? Apparently you can't have production that is completely optional.
; args didn't work when the whole rhs was in brackets. Same with ancestors.
args : "(" [arg ("," arg)*] ")"

arg : IDENTIFIER | typed-arg

typed-arg : IDENTIFIER ":" IDENTIFIER

ecch : "ECCH"

/nodeclass-elem : lhs /"=" expr /";"

lhs : IDENTIFIER
    | chain-expr

expr : IDENTIFIER
     | NUMBER
     | STRING
     | /"(" expr /")"
     | expr BINARY-OP expr
     | function-call
     | chain-expr

chain-lhs : node-ref /"." IDENTIFIER [/"." chain-expr]

chain-expr : node-ref (/"." chain-link)+

; existing-node-ref ?
node-ref : IDENTIFIER | ME | named-node | /"(" node-ref /")"

connection-definition
  : chain-lhs /"=" chain-expr /";"

chain-link : node-ref | explicit-edge /"." chain-link

named-node : /"[" IDENTIFIER /":" IDENTIFIER /"]"

function-call : expr /"(" [ expr (/"," expr )* ] /")"

ancestors : /":" IDENTIFIER (/"," IDENTIFIER)*

codelet : /CODELET IDENTIFIER /GIVEN /"{" match-elem* /"}"
                              /MAKE /"{" make-elem* /"}"

match-elem : node-ref         ; need to disallow ME
           | chain-expr
           | /"{" expr /"}"   ; will be treated as Boolean expression

make-elem : chain-expr
          ; Also need to allow { node.value = expr } ?

explicit-edge : /"(" port-label /"--" port-label /")"

port-label : IDENTIFIER
