Solve pons asinorum

    Want

        QuerySlipnetForDelegate

            QInput  DONE

                BeforeFromAvails  DONE

                AfterFrom  DONE

            QPred, SearchFor  DONE

            Make the QuerySlipnetForDelegate codelet  DONE

                pulse_slipnet  DONE

                build the delegate if successful  DONE

        Match type of codelet_args; throw a Snag if can't match.  DONE

        try_to_fill_nones()  DONE

        next_cellref() DONE
        
            Consume should have no dest field; .run() should figure out its dest
            DONE

        Get the timestepper started, with Want, on a numble of 4,5;9.  DONE

        Notify agent when its delegate succeeds.

        QuerySlipnetForDelegate: return a Build codelet on success  DONE

        test_timestepper(): Verify that the Detector detects that the model
        succeeded.

        adjust support

    Detector(15)  DONE

        RaiseException  DONE

        Call Detectors from FARGModel  DONE

    Slipnet of Consumers  DONE

    do_timestep()  DONE

    CanRun predicate to select Agents  DONE

    UT to call do_timestep() on Want, one step at a time. Verify that it sleeps
    at the right time, and verify that it is not called upon when it's
    sleeping.  DONE

    atest for pons asinorum

        Snag Tag for Consumer with ValuesNotAvail  DONE

        Log spreading activation in slipnet

            In Propagator, save activations dict in form that can be plotted. DONE?
            NEXT Pass ActivationLog as an argument all the way down through the
            stack.

        Plot spreading activation in slipnet

        log agents

        log codelets

        MakeVariant: get operands from avails

    maybe

        blur Consumers with almost-same slipnet activation together?

        Merge slipnet results (to get _ + _ = _)



Other things

    Query slipnet to resolve snags.

    Overriding/varying Agent arguments.

Small things

    Decent logging.

        With auto-indent.

    Give the() a generic return type.

    short() to print short strings  DONE
