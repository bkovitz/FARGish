Solve pons asinorum

    Want

        QuerySlipnetForDelegate

            QInput  DONE

                BeforeFromAvails  DONE

                AfterFrom  DONE

            QPred, SearchFor  DONE

            Make the QuerySlipnetForDelegate codelet  DONE

                pulse_slipnet  DONE

                build the delegate if successful  DONE

        Match type of codelet_args; throw a Snag if can't match.  DONE

        try_to_fill_nones()  DONE

        next_cellref() DONE
        
            Consume should have no dest field; .run() should figure out its dest
            DONE

        Get the timestepper started, with Want, on a numble of 4,5;9.  DONE

        Notify agent when its delegate succeeds.

        QuerySlipnetForDelegate: return a Build codelet on success  DONE

        test_timestepper(): Verify that the Detector detects that the model
        succeeded.

        adjust support

    Detector(15)  DONE

        RaiseException  DONE

        Call Detectors from FARGModel  DONE

    Slipnet of Consumers  DONE

    do_timestep()  DONE

    CanRun predicate to select Agents  DONE

    UT to call do_timestep() on Want, one step at a time. Verify that it sleeps
    at the right time, and verify that it is not called upon when it's
    sleeping.  DONE

    atest for pons asinorum

        Snag Tag for Consumer with ValuesNotAvail  DONE

        Log spreading activation in slipnet

            In Propagator, save activations dict in form that can be plotted.
            DONE

            Pass ActivationLog as an argument all the way down through the
            stack. DONE

            Include timestep in ActivationLogs dict key. DONE

            Fix .num_nodes()  DONE

        Plot spreading activation in slipnet

            add __len__ to Slipnet and Graph  DONE
            
            in atestPons DONE

            Add .num_iterations parameter to FARGModel; propagate it to
            Slipnet Propagator.  DONE

            Add pred parameter to .plot(). DONE

        log agents  DONE

            UT for logging disabled  DONE

            UT for logging a specific agent  DONE
            
        log codelets  DONE

        log fizzles  DONE

            indent for QueryForSnagFixer: no slipnet results!  DONE

        special logging predicate: pr() the FARGModel, with t=

        A Fizzle node's builder should be the agent whose codelet fizzled. DONE

            ValuesNotAvail's __eq__ should disregard the agent and codelet?

        LitPainter's builder should be the Consumer that built it.  DONE

        QueryForSnagFixer raise NoResultFromSlipnet  DONE

    CURRENT MakeVariant: get operands from avails

        NEXT Exclude already-existing Consumers from slipnet search.

        augmented slipnet query?

            Allow SearchFor to include a list of arbitrary nodes. Get them from
            the real avails.

    Respond to NeedMoreSupportToPaint

        Sleep the agent.

        Put behalf_of into DelegateSnagged state.

    Respond to ValuesNotAvail

        VariantMaker Agent?

        Put VariantMaker agent into slipnet?

    maybe

        blur Consumers with almost-same slipnet activation together?

        Merge slipnet results (to get _ + _ = _)


Solve 40 50 60; 150.

        Get 40, 50 to return Consumer(4+5).

        Get 40, 50, 60 to return Consumer(4+5), etc.


Other things

    Query slipnet to resolve snags.

        Make some codelets to resolve snags.

    Overriding/varying Agent arguments.

Seeing what's happening

    Decent logging.  DONE

        With auto-indent.  DONE

    tla= "Time last acted" in FARGModel.pr for Agents

    Easy way to see timeseries of Slipnet queries.

    Easy way to see timeseries of Workspace spreading activation.

    Easy way to see the graph in the Workspace.

Small things

    Give the() a generic return type.

    short() to print short strings  DONE

    Make a standard short() for dataclasses that prints shorts of all the
    fields.

        But for Agents, it should omit the AgentState fields.

    When logging a Codelet, don't print behalf_of if that Agent is being
    logged. This will make logs more readable.

    Maybe: Dereference refs in Codelet .run() args before calling .run()
    This would make the log more informative. See the mess currently
    showing for QuerySlipnetForDelegate.

    Classes with nice __str__ functions for predicates returned by as_pred()
    and ws_pred().

Exciting things

    Record the current context with a desired codelet, and get that codelet
    to be triggered when the same context recurs.
