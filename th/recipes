24-May-2023


"Recipes"

   "Solution" recipes:

      These tell what to do, in a very simple way, to map the lhs to the rhs in
      both Worlds:

         Change the odd letter in the big string to its successor.

         Advance the last letter in "the" sequence.

   "Annotation" recipes:

      These tell how to create another thing, possibly from scratch.

   Do we need a recipe to create a recipe?

      That is, if we have a recipe R1 that paints a letterstring, do we need
      a recipe R2 to paint R1? Or could we use an R2?

      A recipe is a sort of compressed form of whatever it produces. So, could
      we compress more than once?

      Recipes to create recipes might relate only to "memory" problems like
      "If you erase any two letters in 'ajaqb', can you get them back?" and
      "If you erase any two painters in the painters for 'ajaqb', can you get
      them back?"

   Each recipe therefore adds redundancy. "Recipe" might just be a new word for
   "painter".

Arguments to recipes

   If a recipe is something that applies to a context, it takes the context as
   an argument. So, do recipes *alter* contexts, i.e. make
   additions/deletions/changes to some sort of canvas?

   Or, does a recipe take a lhs and produce a rhs? Or take a string with a blank
   and fill the blank?

"Difference" in the recipe world:

   The Differ's output, a "difference", is a recipe to alter the NW.lhs recipe
   so it produces the NW.rhs. The "difference" should also alter the OW.lhs
   recipe so that it produces the OW.rhs.

   A good recipe for an lhs or rhs is one that "find its way" in the other side
   and/or other World and produce some output.

   A recipe should be able to operate on a small context, not just the global
   context.

THE PROCESS

   Annotate everything, i.e. create a recipe that can paint each string from
   scratch. 

   Differ makes a little 

What we will ultimately need

   A set of primitives

      Rules that annotate strings or terms.

      Compound terms suitable for part-whole completion.

         abc->abd   when run on   abc->?  yields   abc->abd

         Chunk[Span[Length[N] Run[OP L]] -> Span[Length[N+1] Run[OP L]]]
            when run on:
         Chunk[Span[Length[3] Run[Same b]] -> Span[Blank]
            yields:
         Chunk[Span[Length[3] Run[Same b]] -> Span[Length[4] Run[Same b]]]

----------------------------------------

What is the recipe for 'abc->abd; ijk->?'?

   The final recipe:
      Chunk[Run[Succ] Seed[a] Length[3]] -> Chunk[Run[Succ] Seed[a] Length[3] Skip[3]] ;
      Chunk[Run[Succ] Seed[i] Length[3]] -> Chunk[Run[Succ] Seed[i] Length[3] Skip[3]]

   Steps to construct it:

      see that 'abc' is a Succ group:
      abc: Chunk[Run[Succ] Seed[a] Length[3]]
         by Rule: detect Succ group

      see that 'abd' is a Succ group with a Skip:
      abd: Chunk[Run[Succ] Seed[a] Length[3] Skip[Last]]
         by Rule: detect Succ group

      see difference between OW.lhs and OW.rhs:
      Chunk[...] -> Chunk[... Skip[Last]]
         The ... means "match everything else there". It's like a variable that holds many terms.
         By Differ Rule: replace everything that's the same with ... .

      see that 'ijk' is a Succ group:
      ijk: Chunk[Run[Succ] Seed[i] Length[3]]
         by Rule: detect Succ group:

      the difference now matches 'Chunk[Run[Succ] Seed[i] Length[3]] -> Chunk[Blank]' and fills the blank by simply expanding
      the ... variable within the last term:
      Chunk[Blank]: Chunk[Run[Succ] Seed[i] Length[3] Skip[Last]]
         by Rule: apply partial match with the difference from step 3.
         That's the solution.
      
I expect that we'll need more complicated difference terms, possibly with more than one variable.

A remaining question: do we want the 'difference' to specify more precisely what to match in a given context?

A difference might provide more features to match in order to match more precisely. That's what Predominantly[b] and
Icon[b] can do. They mean "pick the Chunk that is predominantly or distinctively 'b'." These features, like '->',
provide reference points to orient the match. What counts as Icon[b] can vary greatly depending on context.

Maybe we only need indexicals when there are many Chunks to choose from, or many ways to find the argument of a function
(like Succ in 'mrrjjj').

----------------------------------------

MAIN IDEA     THE THREE TERM-ACTIONS

Some requirements for terms:

   A Rule that can rewrite something as the term.

   A way to create the original text from the term.
      "Painting letters"
      A term from which a string can be painted is called a RECIPE for that string.

   A way for the term to match some new text.

----------------------------------------

Can the 'recipes' approach do Doug's problem 32?

32. eeeeqee -> eeeeree; sosss -> ?

   The final recipe containing only constants, i.e. the terms that can paint the solution (OW + NW):
      
      Chunk[Run[Same] Seed[e] Length[7] ReplaceWith[q] ReplaceAt[5]] ->
      Chunk[Run[Same] Seed[e] Length[7] ReplaceWith[r] ReplaceAt[5]] ;
      Chunk[Run[Same] Seed[s] Length[5] ReplaceWith[o] ReplaceAt[2]] ->
      Chunk[Run[Same] Seed[s] Length[5] ReplaceWith[p] ReplaceAt[2]]

   Steps to construct it:

      see that 'eeeeqee' is almost a Same group:
      eeeeqee: Chunk[Run[Same] Seed[e] Length[7] ReplaceWith[q] ReplaceAt[5]]
         by Rule: detect Same group

      see that 'eeeeree' is almost a Same group:
      eeeeree: Chunk[Run[Same] Seed[e] Length[7] ReplaceWith[r] ReplaceAt[5]]
         by Rule: detect Same group

      see difference between OW.lhs and OW.rhs:
      Chunk[... ReplaceWith[L]] -> Chunk[... ReplaceWith[Succ[L]]]
         By Differ Rule: replace everything that's the same with ... .

      see that 'sosss' is almost a Same group:
      sosss: Chunk[Run[Same] Seed[s] Length[5] ReplaceWith[o] ReplaceAt[2]]
         by Rule: detect Same group

      the difference now matches 'Chunk[Run[Same] Seed[s] Length[5] ReplaceWith[o] ReplaceAt[2]] -> Chunk[Blank]' and
      fills the blank by expanding the ... variable within the last term:
      Chunk[Blank]: Chunk[Run[Same] Seed[s] Length[5] ReplaceWith[p] ReplaceAt[2]]
         by Rule: apply partial match with the difference from step 3.
         That's the solution.

   indicate "the odd letter"?
   Chunk[... ReplaceWith[L]
   "replace the odd letter with its successor"

ReplaceWith can be seen as "the odd letter".
Seed in a Chunk with Run[Same] can be seen as "the predominant letter".

----------------------------------------

What is the recipe for 'abc->abd; iijjkk->?'?

   The final recipe:
      Chunk[Run[Succ] Seed[a] Length[3]] -> Chunk[Run[Succ] Seed[a] Length[3] Skip[Last]] ;
      Chunk[Run[Succ] Seed[Chunk[Run[Same] Seed[i] Length[2]]] Length[3]] ->
      Chunk[Run[Succ] Seed[Chunk[Run[Same] Seed[i] Length[2]]] Length[3] Skip[Last]]
   PROBLEM: How does Succ operate on the repeating Chunk?

   Variant using 'arrow' approach:
      Chunk[Run[Seed[L] -> Seed[Succ[L]]] Seed[Chunk[Run[Same] Seed[i] Length[2]]] Length[3]] ->
      Chunk[Run[Seed[L] -> Seed[Succ[L]]] Seed[Chunk[Run[Same] Seed[i] Length[2]]] Length[3] Skip[Last]]

   Steps to construct it:

      see that 'abc' is a Succ group:
      abc: Chunk[Run[Succ] Seed[a] Length[3]]
         by Rule: detect Succ group

      see that 'abd' is a Succ group with a Skip:
      abd: Chunk[Run[Succ] Seed[a] Length[3] Skip[Last]]
         by Rule: detect Succ group

      see difference between OW.lhs and OW.rhs:
      Chunk[...] -> Chunk[... Skip[Last]]
         The ... means "match everything else there". It's like a variable that holds many terms.
         By Differ Rule: replace everything that's the same with ... .

      see that 'ii' is a Same group:
      ii: Chunk[Run[Same] Seed[i] Length[2]]
         by Rule: detect Same group

      see that 'jj' is a Same group:
      jj: Chunk[Run[Same] Seed[k] Length[2]]
         by Rule: detect Same group

      see that 'kk' is a Same group:
      kk: Chunk[Run[Same] Seed[k] Length[2]]
         by Rule: detect Same group

      The difference is going to match too much--more than one target. Therefore it must be made more specific:
      Chunk[... Run[Succ]] -> Chunk[... Run[Succ] Skip[Last]]
         by SOMEHOW finding a way to add an attribute to rule out the ii,jj,kk Chunks

      see that 'ii,jj,kk' is a Succ group:
      ii,jj,kk: Chunk[Run[Seed[L] -> Seed[Succ[L]]] Seed[Chunk[Run[Same] Seed[i] Length[2]]] Length[3]]
         by Rule: detect Succ group

      PROBLEM: Run[Succ] doesn't match Run[Seed[L] -> Seed[Succ[L]]].

      IDEA: Include in the ii,jj,kk Chunk a redefinition of Succ, viz. Run[Seed[L] -> Seed[Succ[L]]].
      It would be nice to represent ii,jj,kk as 'ijk' in some way.

         Chunk[ijk ExpandedVia[Chunk[Run[Same] Seed[L] Length[2]]]]
         Chunk[Chunk[Run[Succ] Seed[i] Length[3]] ExpandedVia[Chunk[Run[Same] Seed[L] Length[2]]]]

      IDEA: Make Succ work on Predominantly[L]

         Chunk[Predominantly[i] Predominantly[j] Predominantly[k],
               where Predominantly[L] is taken from
               Chunk[ii] Chunk[jj] Chunk[kk]]

         The interesting idea here is to not bother noting that Chunk[ii] is a Run[Same] group. Just chunk it
         and extract only what's needed from it as it's needed. In this case, the length doesn't matter for matching--
         though it does matter for constructing the NW.rhs.

         A fundamental problem: a hazy way to find something in a context, e.g. Predominantly[b], doesn't easily
         translate into a way to construct a new element of that context. Maybe solve this by looking back to the
         original context and constructing a constructor on the fly.

         WANT: Succ to take on a new meaning in the new context.

         Chunk[Run[L -> Succ[L]] Seed[i] SeedFunc[Predominantly[L]] Where[Predominantly comes from Chunk[ii]]]

         The model could look at Chunk[ii] and see how it has been rewritten or could be rewritten, viz. Chunk[Run[Same]
         Seed[i] Length[2]], then use that as a "model" for generating something like 'll'.

         If an annotation (a "rewriting") lacks the information needed to reconstruct the original, that's OK, as long
         as the annotation is linked to the original. We only need the ability to reconstruct the original when
         constructing a new string (i.e. not the original).

         Maybe even when replacing 'kk' with 'll', the model could skip representing 'kk' as a Same group of length 2,
         by simply globally replacing the Predominant letter.


         Chunk[Predominantly[i] Predominantly[j] Predominantly[k], Skip[last]
               where Predominantly[L] is taken from
               Chunk[ii] Chunk[jj] Chunk[kk]]

         Could Skip[Last] be OK to include in a Chunk without a Run, and simply trigger a search to find or create a Run
         when and if needed?

         We need to represent NW.lhs such that Skip[Last] can work on it.

         26-May-2023: We still haven't figured out a fully satisfactory, fully thought-through solution to the above
         problem.

      the difference now matches--sort of--'Chunk[Run[Seed[L] -> Seed[Succ[L]]] Seed[Chunk[Run[Same] Seed[i] Length[2]]]
      Length[3]] -> Chunk[Blank]' and fills the blank by expanding the ... variable in the last term:
      Chunk[Blank]: Chunk[Run[Seed[L] -> Seed[Succ[L]]] Seed[Chunk[Run[Same] Seed[i] Length[2]]] Length[3] Skip[Last]]
         by Rule: apply partial match with the difference from step 7.
         That's the solution.
