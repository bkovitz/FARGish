abc -> abd; ijk -> ?
c1     c2   c3     c4

Not needed:
    Notice that 'abc' is a Seq[Succ].
    Notice that 'ijk' is a Seq[Succ].
    Notice that 'abc' and 'ijk' are both Seq[Succ], just starting from different letters.

Start here:
Notice that 'abd' is a Seq[Succ, Skip[3]].
Notice that 'abc' and 'abd' are both Seq[Succ], just with 'abd' having Skip[3].
Make a painter capable of creating 'abd' from 'abc' and (maybe) vice versa.
    Where there is an arrow, we look for a difference.
    abcabc->abcgabc; ttee->?

    seq1(), seqskip1() old
    seq2(), seqskip2()      The fact that 'abc' is Seq and 'ijk' is Seq should be enough information to match and fill.
    do seqskip()

    seq() seq() -> seqseqinsert()
    seq() seq() -> seqseqinsert()

    Seq Seq -> Seq 'g' Seq
    S S -> S 'g' S     Hey, look, it's a Rule.

    S -> S/SKIP        Hey, look, it's another Rule.


    Noticing sameness should be easy. And it's the main thing needed to create a Rule where the same variable
    occurs more than once.

    abc -> abd; ijk -> ?
    abc -> abd; abc -> ?

    The -> in the analogy problem wants to become an -> in a Rule! "Where you see 'abc', change it to 'abd'."
    The detection of 'abc' has to match 'ijk', and the rule has to change 'ijk' to 'ijl'.

    For memory problems, we need a bidirectional arrow, or rather a painter cluster that can fill whatever is blank.


    abc -> abd
    LiteralSeq['a', 'b', 'c'] -> LiteralSeq['a', 'b', 'd']

    LiteralSeq[LiteralSeq[...], '->', LiteralSeq[...]]  ; If model sees partial version of this, complete it.

R1  LS[LS1, '->', LS1[addExc]], ';', LS[LS2, '->', __] ->  LS[LS1, '->', LS1[addExc]], ';', LS[LS2, '->', LS2[addExc]]

    hole -> blank
    whole

    Our two main transformation ideas:
    1. Rule: lhs -> rhs
    2. Whole/Completion: see part of a whole, complete it


    aaaabaabaaa    aabaabaaaaba   Same by "loose match"; high similarity score.


SMALL IDEAS

    Tag every cell as OldWorld or NewWorld, and tag every cell as Lhs or Rhs. Then you don't need a separate canvas
    for each part of a Copycat problem. Cells know what part of the problem they're in, and cells can be grouped with
    cells in another part of the problem; e.g. 'abc->abd' can match the lhs of a Rule. This means that there is only
    one canvas. We will still probably need patterns to match "all in the same side" and "all in the same world"
    (which was what we were doing with patterns like C.I=L, C.(I+1)=Succ(L) -> Seq[C Succ I I+1 L Succ(L)], in which
    the letter C occurs in multiple items).

    Maybe a small set of Rules should run the system, but the Rules mostly concern creating and applying
    Whole/Completions. The set of Rules would be immutable. The set of Wholes/Completions would change as the
    model runs.

    Maybe assign different variables to constants in the Old World and the New World.

    Usually we want to create a rhs from a lhs, but we don't need a way to create the New World lhs from the Old
    World lhs.

Notice that that painter can run on 'ijk->___'
Since c4 is blank, we need a painter that can run on 'ijk' and fill c4.
Run the painter, fill c4, examine cycles, see that the problem is solved.



Seq -> Run
Seq means "these things in this order"
Run means "this operation performed one or more times on consecutive cells/spans"
    Do we lose the idea that a repeater fills its canvas?
span means a range of cells, i.e. what we used to imagine would go into a snippet
Rule is a special case of Whole/Completion

Seq[a b c -> a b d ; i j k -> ?]
Seq[Seq[a b c] -> Seq[a b d]]...
Seq[Chunk[3 Run[a Succ]] -> Chunk[3 Run[a Succ Skip[3]]]]...

            Run[L OP]    ->         Run[L OP Skip[3]]
    Chunk[N Run[L OP]    -> Chunk[N Run[L OP Skip[3]]


When the model sees that two things are the same, it can make a variable out of them.


1. bbbb -> bbbbb; bbb -> ?

Seq[b b b b -> b b b b b ; b b b -> ?]
Seq[Seq[b b b b] -> Seq[b b b b b] ; Seq[b b b] -> ?]
Seq[Chunk[4 Run[b Same]] -> Chunk[5 Run[b Same]] ; Chunk[3 Run[b Same]] -> ?]
    replace constants with variables: 'same' and +1
Seq[Chunk[N Run[L OP]] -> Chunk[N+1 Run[L OP]] ; Chunk[M Run[L2 OP2]] -> ?]
    now we can run the Chunk->Chunk rule inside the New World, fillin the ?
Seq[Chunk[N Run[L OP]] -> Chunk[N+1 Run[L OP]] ; Chunk[M Run[L2 OP2]] -> Chunk[M+1 Run[L2 OP2]]]
    Now how do we get the constants back? We still know what each Chunk corresponds to.
    If we save the original constant whenever we make a variable, we can always regenerate a plain literal Seq.
Seq[b b b b -> b b b b b ; b b b -> b b b b]

2. bbbb -> bbbbb; eee -> ?

Seq[b b b b -> b b b b b ; b b b -> ?]
Seq[Seq[b b b b] -> Seq[b b b b b] ; Seq[e e e] -> ?]
Seq[Chunk[4 Run[b Same]] -> Chunk[5 Run[b Same]] ; Chunk[3 Run[e Same]] -> ?]
    All the steps with variables are the same as in the previous problem.
Seq[Chunk[N Run[L OP]] -> Chunk[N+1 Run[L OP]] ; Chunk[M Run[L2 OP2]] -> ?]
Seq[Chunk[N Run[L OP]] -> Chunk[N+1 Run[L OP]] ; Chunk[M Run[L2 OP2]] -> Chunk[M+1 Run[L2 OP2]]]
Seq[b b b b -> b b b b b ; b b b -> e e e e]

How do we address competing Seqs?

Seq[Chunk[N Run[L OP]] -> Chunk[5 Run[L OP]] ; Chunk[M Run[L2 OP2]] -> Chunk[5 Run[L2 OP2]]]

SHOW ABHINAV
Each step above is a representation of the whole board.


TODO Email Etienne: ask about spatial relations vs. term-rewriting.

TODO More examples step-by-step with term rewriting.


BIG IDEAS

    Terms can be run as Rules. A Term with a -> in it is a Rule.

    Terms can be created by Rules, replacing constants with variables or noticing relations among constants.

    Primitive relations: 'same', succ, pred, +1

    Compound relations: defined by Terms or Rules.

    Maybe spatial relations are implicit in the Term structure.



How does Hopfield net relate to all this?

    In Hopfield net, between any two canvas cells, there is a relation enabling one cell's value to be computed
    from the other.

    In C&P, we include a spatial relation that can be reconstructed, in addition to the value relation.

    'Run' has both spatial and value relations inside it.

    The -> is a relationship between two Runs. The -> actually indicates a spatial relation: A -> B matches something
    to the left of an arrow and something to the right.

    We're combining a spatial and value relation, and making a rule out of it that can be applied somewhere else.

    pix pix w
    1 x 1 = 1
    -1  1   -1
    1  -1   -1
    -1 -1   1

    2(f)(x) = f(f(x))
    W(p1) = p2
    W(p2) = p1

    Should we have an update rule?

    ONE MAIN IDEA
    In HN, the original images are attractors in the update function. In C&P, good analogies are the attractors.

    Attractors in HN have become 'cycles' in C&P. The genealogy of what created what defines the attractors.

Seq[Chunk[4 TERM[b Same]] -> Chunk[5 TERM[b Same]] ; Chunk[3 Run[e Same]] -> ?]

    The original idea for c&p was to combine the Hopfield net with the lambda calculus: to exploit the fact that
    in the lambda calculus, all data is functions. In the Hopfield net, there is a weight associated with every
    pair of canvas cells. In the lambda calculus, we view the weight as a function. In c&p, the edges become
    painters. A painter specifies a spatial relation and a value relation (at least); given some subset of its
    arguments, it can produce the rest.

SHOW ABHINAV
Perhaps spatial relations are represented by the structure of terms in rules, and perhaps value relations are
represented by functions within rules, like Succ[L]. Or perhaps spatial relations are represented by expressions
containing indices, like I+1. And of course Runs represent both spatial and value relations.

IDEA There could be rule elements like + and * in regexes. Seq[L Succ[L]]* or Seq[L Succ[L]...].

IDEA Rule patterns that match elements that are spaced apart in a larger context, like Seq[A ... B ... A] -> Seq[A B A].

IDEA Store "where in the canvas this covers" (span) with every term. Allow matching on "where". Storing the span might
be the TRS equivalent of "4 args" (implicit indirection).

IDEA Store genealogy with every term. This enables cycle detection, hence attractor detection.

IDEA Could we detect attractors the old-fashioned way, by having rules/painters repaint terms, with some fading
out, leaving only the mutually reinforcing cycles? We need to try doing this step by step in a few concrete examples.

IDEA Process A: terms match rules, giving rise to rewrites that represent them. Process B: rules generate terms,
including filling of blanks. An attractor occurs when terms generate rewrites and the rewrites fill blanks that result
in terms that generate the same rewrites. (Perhaps such a collection of terms is a "normal form".)

IDEA Could we have unenclosed terms that span only a small part of the problem string? Such a term means "I noticed
this feature here." Or should we only have lots of complete representations of the whole problem string? Then
every term comes in its context, so its context can be exploited for spatial and value relations.

OBSERVATION We have rewriting as rerepresenting as well as filling a blank. LHS -> RHS means LHS could be rerepresented
by RHS and it means that the blank in 'LHS -> ___' could be filled by RHS. These are the two things we need to do:
rerepresent things (changing constants to variables, highlighting a relationship between the constants) and fill blanks.

IDEA Could any "chunk" serve as a whole that can be completed (like a painter cluster), while a chunk containing ->
is a formula for rerepresenting? Hence a chunk containing -> can *also* fill a blank. Need to flesh this out on several
examples. In each step of each example, we need to note the invoked rule and anything else--the genealogy.

IDEA Could we let this system evolve its own rules and parameters (numbers, weights) by running it on a variety of
examples, say from dougs84, where we provide the desired answer? Keep whichever rules actually prove useful in getting
correct answers.

IDEA Could some rules create new blanks, which rerepresent letters? These blanks would then need to be filled in by
other rules/wholes, which are tested by their ability to match the original letters.

IDEA Could rules themselves (i.e. with variables) be matched by rules, leading to rewrites and completions?

QUESTIONS How do we choose which redex to examine next, and how do we choose which rule/whole to try next on a given
redex?

OBSERVATION In ordinary TRS, constants in terms map to variables in rules and the rules generate new terms, which
contain only constants. In C&P, (some) rules map constants to variables. This enables new rules to be formed
dynamically.

OBSERVATION If we regard a string as a *program*, then C&P transforms the program into an "equivalent" program--not
exactly equivalent, but looser, with variables replacing some constants. If the original program is incomplete (i.e.
contains blanks), the transformed program completes itself.

IDEA Let's look for a mapping between painter clusters and terms with variables. Painter clusters have no arrow; they
have relations between variables. The primitives in clusters are relations in which one value can be computed from the
other. If a term uses a variable more than once, is that enough to reconstruct a whole from a part?

    Seq[a A b A]   Given Seq[a c c], this can set A=Seq[c c] and yield Seq[a c c b c c].

Do we have a use for that?

IDEA Start with some rules and devise some Copycat problems to exploit them and demonstrate their flexibility.

IDEA Context[] can hold descriptions of the same span. Or maybe Span[]. Span[Length[3] StartsWith[a] Run[_ Succ]].
The arguments to Span are unordered; matching goes by type. So, Span[Run[L Succ] Length[N]] is like Span[length=N run=[L
Succ]].

IDEA A relative spatial relation: "to the right of an 'a'". Another: "to the right of something that matches that
(abstract) term". Another: "the lhs corresponding to that rhs, i.e. the part before ->".
